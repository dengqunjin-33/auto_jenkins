lua_shared_dict upstreams 1m;

upstream  produce-all-serve {
    server    localhost:8001 weight=1;
    server    localhost:8002 weight=1;
}

upstream  exclude-one-server {
    server    localhost:8002 weight=1;
}
	
upstream  exclude-two-server {
   server    localhost:8001 weight=1;
}
	
server {
    listen       8000;
    server_name  localhost;
	location = /_switch_upstream {
        content_by_lua_block{
                local ups = ngx.req.get_uri_args()["ups"]
                if ups == nil or ups == "" then
                    ngx.say("upstream is nil 1")
                    return nil
                end
                local host = ngx.var.http_host
                local upstreams = ngx.shared.upstreams
                local ups_src = upstreams:get(host)
                local succ, err, forcible = upstreams:set(host,  ups)
        }
    }
         
    location / {
        set_by_lua_block $my_upstream {
            local ups = ngx.shared.upstreams:get(ngx.var.http_host)
            if ups ~= nil then
                return ups
            end
            return "produce-all-serve"
        }
 
        proxy_next_upstream off;
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    Host                $host;
        proxy_http_version  1.1;
        proxy_set_header    Connection  "";
        proxy_pass          http://$my_upstream ;
    }
}
